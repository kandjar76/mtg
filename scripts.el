;; Function to extract a copy/paste-able deck from a .org file:
;; To be called from a <deck>.org file
(defun mtg-extract-deck()
  (interactive)
  (let ((file-buffer (current-buffer))
	(file-start (point-min))
	(file-end   (point-max))
	(buffer (get-buffer-create "*Deck*")))
    (with-current-buffer buffer
      (erase-buffer)
      (insert-buffer-substring file-buffer file-start file-end)
      (goto-char (point-min))
      ;; Clear the end of the buffer
      (re-search-forward "^|--")
      (delete-region (point-at-bol) (point-max))
      ;; Clear the beginning:
      (goto-char (point-min))
      (re-search-forward "^|")
      (delete-region (point-min) (point-at-bol))
      ;; Delete labels and empty lines
      (goto-char (point-min))
      (while (not (equal (point) (point-max)))
	(if (looking-at "^|[ \t]+|")
	    (let ((start (point-at-bol)))
	      (forward-line 1)
	      (delete-region start (point-at-bol))
	      (goto-char (point-at-bol)))
	    (forward-line 1)))
      ;; Clear unneeded columns
      (goto-char (point-min))
      (while (not (equal (point) (point-max)))
	(re-search-forward "^|[^|]*|[^|]*")
	(delete-region (point) (point-at-eol))
	(goto-char (point-at-bol))
	(re-search-forward "^|[ \t]+")
	(delete-region (point-at-bol) (point))
	(re-search-forward "[ \t]|")
	(delete-char -2)
	(forward-line 1)
	(goto-char (point-at-bol)))
      ;; Final touch:
      (goto-char (point-min))
      (delete-trailing-whitespace (point-min) (point-max))
      (when (looking-at "^1[ \t]")
	(delete-char 2))
      (goto-char (point-at-eol))
      (insert "\n")
      (goto-char (point-min))      
      )
   (switch-to-buffer buffer)))
